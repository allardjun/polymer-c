% Read a vertical ASCII file of output values generated by outputControl.c
% and convert to a Matlab dict object, then write this dict to a .mat file.
% allardlab.com

input_file_path = '../src/PolymerCode/outputTest2.txt';

% sort lines in the file using bash
command = sprintf('sorted_lines=$(sort "%s"); echo "$sorted_lines" > "%s.sorted" ', input_file_path,input_file_path);
system(command);
command = sprintf( 'sed -i "s/\[[^][]*\]//g" input_file_path)
system(command);


MAXDIM = 1000; % maximum assumed dimension of any particular key, used for memory allocation. The code should still work for larger sizes, but suffer slower performance.

fileID = fopen(strcat(input_file_path,'.sorted'), 'r');
if fileID == -1
    error(['Cannot open file: ' filename]);
end

clear output_dict

% temporary storage for a particular key while it's being filled
matrix_during_filling = zeros(MAXDIM,MAXDIM);

tline = strtrim(fgetl(fileID));
while ischar(tline)
    is_unread_line = 1; 
    lineData = strsplit(tline); % delimit the line by spaces
    key = lineData{1};

    %disp(lineData)

    if (numel(lineData) == 2 && ~isempty(lineData{2})) % simple single value per run
        value = {str2num(lineData{2})};
    elseif(numel(lineData) == 3 && ~isempty(lineData{3}) && is_unread_line==1) % interpret the 2nd entry as indexing the filament
        coordinate1 = str2num(lineData{2})+1; % go from C's zero-indexing to Matlab's 1-indexing
        
        matrix_during_filling(coordinate1) = str2num(lineData{3});

        maxCoordinate1=coordinate1;
        while is_unread_line == 1 && ischar(tline)
            tline = fgetl(fileID);
            if ischar(tline)
                lineData = strsplit(tline); % delimit the line by spaces
                if strcmp(lineData{1},key)
                    coordinate1 = str2num(lineData{2})+1; % go from C's zero-indexing to Matlab's 1-indexing
                    if coordinate1>maxCoordinate1 maxCoordinate1=coordinate1; end
                    matrix_during_filling(1,coordinate1) = str2num(lineData{3});
                else
                   is_unread_line = 0;
                end
            end
        end

        % make shrunken matrix for values
        value = {matrix_during_filling(1,1:maxCoordinate1)};

    elseif (numel(lineData) == 4 && ~isempty(lineData{4}) && is_unread_line==1) % interpret the 3rd entry as indexing the site
        coordinate1 = str2num(lineData{2})+1; % go from C's zero-indexing to Matlab's 1-indexing
        coordinate2 = str2num(lineData{3})+1; 
        matrix_during_filling(coordinate1,coordinate2) = str2num(lineData{4});
        maxCoordinate1=coordinate1;
        maxCoordinate2=coordinate2;
        while is_unread_line == 1 && ischar(tline)
            tline = fgetl(fileID);
            if ischar(tline)
                lineData = strsplit(tline); % delimit the line by spaces
                if strcmp(lineData{1},key)
                    coordinate1 = str2num(lineData{2})+1; % go from C's zero-indexing to Matlab's 1-indexing
                    coordinate2 = str2num(lineData{3})+1;
                    if coordinate1>maxCoordinate1 maxCoordinate1=coordinate1; end
                    if coordinate2>maxCoordinate2 maxCoordinate2=coordinate2; end
                    matrix_during_filling(coordinate1,coordinate2) = str2num(lineData{4});
                else
                    is_unread_line = 0;
                end
            end
        end
        % make shrunken matrix for values
        value = {matrix_during_filling(1:maxCoordinate1, 1:maxCoordinate2)};
    end
    output_dict(key) = value;

    disp(key);
    disp(value);
%     pause;

    if (is_unread_line && ischar(tline)) tline = fgetl(fileID); end

end
fclose(fileID);

%disp(output_dict);


% goal is to be able to call something like:
%display(output_dict('Prvec0[nf][iy]'){1,17})